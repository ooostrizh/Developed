Процедура ВыполнитьОбмен() Экспорт
	Попытка
		Если ПараметрыСеанса.ВыполняетсяОбмен = Истина Тогда
			Возврат;
		КонецеСли;	
		ПараметрыСеанса.ВыполняетсяОбмен = Истина;
		Прокси = ПолучитьПроксиПоСерверу();
		//ПолучитьПрокси();
		
		ИдентификаторУстройства = Константы.ИдентификаторМобильногоУстройства.Получить();
		
		ТипМассивНомеров = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("ArrayOfNumber");
		МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
		
		ТипСтрокаНомера = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("NumberRow");
		
		
		//серверы данных
		ЗагрузитьСерверыДанных(Прокси);
		
		//службы доставки
		ТабСД = Прокси.Get_ServiceDelivery(ИдентификаторУстройства);
		
		Для Каждого Тек Из ТабСД.ServiceDelivery Цикл
			Най = Справочники.СлужбыДоставки.НайтиПоКоду(Тек.Number);
			
			Если Най.Пустая() Тогда
				Най = Справочники.СлужбыДоставки.СоздатьЭлемент();
			Иначе
				Най = Най.ПолучитьОбъект();
			КонецЕсли;	
			Най.Код = Тек.Number;
			Най.Наименование = Тек.Name;
			Най.Записать();
			
			СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
			СтрокаНомера.Number = Тек.Number;
			
			МассивНомеров.NumberRow.Добавить(СтрокаНомера);
		КонецЦикла;			
		Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "Справочник.сцСлужбыДоставки", МассивНомеров);	
		
		//интернет магазины
		
		ТабСД = Прокси.Get_InternetShop(ИдентификаторУстройства);
		МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
		Для Каждого Тек Из ТабСД.InternetShop Цикл
			Най = Справочники.ИнтернетМагазины.НайтиПоКоду(Тек.Number);
			
			Если Най.Пустая() Тогда
				Най = Справочники.ИнтернетМагазины.СоздатьЭлемент();
			Иначе
				Най = Най.ПолучитьОбъект();
			КонецЕсли;	
			Най.Код = Тек.Number;
			Най.Наименование = Тек.Name;
			Най.ПолноеНаименование = Тек.LongName;
			Най.Записать();
			
			СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
			СтрокаНомера.Number = Тек.Number;
			
			МассивНомеров.NumberRow.Добавить(СтрокаНомера);
		КонецЦикла;			
		Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "Справочник.сцОтправители", МассивНомеров);	
		
		//склады возврата
		
		ТабСД = Прокси.Get_Warehouse(ИдентификаторУстройства);
		МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
		Для Каждого Тек Из ТабСД.Warehouse Цикл
			Най = Справочники.СкладыВозврата.НайтиПоКоду(Тек.Number);
			
			Если Най.Пустая() Тогда
				Най = Справочники.СкладыВозврата.СоздатьЭлемент();
			Иначе
				Най = Най.ПолучитьОбъект();
			КонецЕсли;	
			Най.Код = Тек.Number;
			Най.Наименование = Тек.Name;
			Най.Адрес = Тек.Address;
			Най.КонтактноеЛицо = Тек.ContactPerson;
			Най.Телефон = Тек.Phone;
			
			Най.Записать();
			
			СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
			СтрокаНомера.Number = Тек.Number;
			
			МассивНомеров.NumberRow.Добавить(СтрокаНомера);
		КонецЦикла;			
		Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "Справочник.сцМестаХранения", МассивНомеров);	
		
		//отправления
		
		ТабСД = Прокси.Get_Shipments(ИдентификаторУстройства);
		МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
		Для Каждого Тек Из ТабСД.Shipment Цикл
			Най = Справочники.Отправления.НайтиПоКоду(Тек.NumberYandex);
			
			Если Най.Пустая() Тогда
				Най = Справочники.Отправления.СоздатьЭлемент();
			Иначе
				Най = Най.ПолучитьОбъект();
			КонецЕсли;	
			Най.Код = Тек.NumberYandex;
			Най.СлужбаДоставки = Справочники.СлужбыДоставки.НайтиПоКоду(Тек.ServiceDelivery);
			Най.ИнтернетМагазин = Справочники.ИнтернетМагазины.НайтиПоКоду(Тек.InternetShop);
			Най.СкладВозврата = Справочники.СкладыВозврата.НайтиПоКоду(Тек.Warehouse);
			Най.НомерСЦ = Тек.NumberSC;
			Най.НомерСД = Тек.NumberSD;
			Най.Вес = Тек.Weight;
			Най.Дата = Тек.Date;
			
			
			Най.Записать();
			
			СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
			СтрокаНомера.Number = Тек.NumberSC;
			
			МассивНомеров.NumberRow.Добавить(СтрокаНомера);
		КонецЦикла;			
		Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "БизнесПроцесс.сцОтправление", МассивНомеров);	
		
		//пользователи
		
		ТабСД = Прокси.Get_MobileUser(ИдентификаторУстройства);
		МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
		Для Каждого Тек Из ТабСД.MobileUser Цикл
			Най = Справочники.Пользователи.НайтиПоКоду(Тек.Number);
			
			Если Най.Пустая() Тогда
				Най = Справочники.Пользователи.СоздатьЭлемент();
			Иначе
				Най = Най.ПолучитьОбъект();
			КонецЕсли;	
			Най.Код = Тек.Number;
			Най.Наименование = Тек.Name;
			Най.Пароль = Тек.Password;
			Най.Записать();
			
			СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
			СтрокаНомера.Number = Тек.Number;
			
			МассивНомеров.NumberRow.Добавить(СтрокаНомера);
		КонецЦикла;			
		Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "Справочник.МобильныеПользователи", МассивНомеров);	
		
		
		
		//параметры системы
		
		ТабПараметров = Прокси.Get_DataParameters(ИдентификаторУстройства);		
		Для Каждого Тек Из ТабПараметров.DataParameters Цикл
			Если Тек.Key = "ИнтервалАвтоматическогоОбменаДанными" Тогда
				Попытка
					Интервал = Число(Тек.Value);
				Исключение
					ЗаписатьОшибкуВЛог(ОписаниеОшибки(), Перечисления.РежимыОбменаДанными.ЗагрузкаДанных);
				КонецПопытки;
				Если Интервал <> Константы.ИнтервалАвтоматическогоОбменаДанными.Получить() Тогда
					Константы.ИнтервалАвтоматическогоОбменаДанными.Установить(Интервал);
				КонецеСли;	
			ИначеЕсли Тек.Key = "ПарольАдминистратора" Тогда
				Если Тек.Value <> Константы.ПарольАдминистратора.Получить() Тогда
					Константы.ПарольАдминистратора.Установить(Тек.Value);
				КонецеСли;
			ИначеЕсли Тек.Key = "ЗагружатьДокументыВЦББезПроверки" Тогда
				Зн = Булево(Число(Тек.Value));
				Если Зн <> Константы.ЗагружатьДокументыВЦББезПроверки.Получить() Тогда
					Константы.ЗагружатьДокументыВЦББезПроверки.Установить(Зн);
				КонецеСли;	
			ИначеЕсли Тек.Key = "ТестоваяСреда" Тогда
				Зн = Булево(Число(Тек.Value));
				Если Зн <> Константы.ТестоваяСреда.Получить() Тогда
					Константы.ТестоваяСреда.Установить(Зн);
				КонецеСли;				
			ИначеЕсли Тек.Key = "РабочееМесто" Тогда
				Если Тек.Value <> Константы.ЗаголовокСистемы.Получить() Тогда
					Константы.ЗаголовокСистемы.Установить(Тек.Value);
				КонецеСли;
			ИначеЕсли Тек.Key = "КодПользователя" Тогда
				Если Не ЗначениеЗаполнено(Тек.Value) Тогда
					Константы.ЗаголовокСистемы.Установить(Справочники.Пользователи.ПустаяСсылка());
				Иначе
					Польз = Справочники.Пользователи.НайтиПоКоду(Тек.Value);
					Если Польз.Пустая() Тогда
						ЗаписатьОшибкуВЛог("Не найден пользователь с кодом " + Тек.Value, Перечисления.РежимыОбменаДанными.ЗагрузкаДанных);
					Иначе
						ТекПольз = Константы.Пользователь.Получить();
						Если ТекПольз <> Польз Тогда
							Константы.Пользователь.Установить(Польз);
						КонецЕСли;	
					КонецеСли;	
				КонецеСли;	
			КонецеСли;	
		КонецЦикла;			
		
		//идентификаторы push
		#Если МобильноеПриложениеСервер Тогда
			ТипID = Прокси.ФабрикаXDTO.Пакеты.Получить("http://v8.1c.ru/8.3/data/ext").Получить("DeliverableNotificationSubscriberID");
			ID = Прокси.ФабрикаXDTO.Создать(ТипID );
			
			ТП = Константы.ТипПодписчика.Получить();
			Если ТП = Перечисления.ТипыПодписчиковУведомлений.APNS Тогда
				ID.subscriberType = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://v8.1c.ru/8.3/data/ext","DeliverableNotificationSubscriberType"), "APNS");
			ИначеЕсли ТП = Перечисления.ТипыПодписчиковУведомлений.GCM Тогда	
				ID.subscriberType = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://v8.1c.ru/8.3/data/ext","DeliverableNotificationSubscriberType"), "GCM");
			КонецеСли;	
			ID.deviceID = Константы.ИдентификаторУстройства.Получить();
			ID.applicationID = Константы.ИдентификаторПриложения.Получить();
			ID.databaseID = Константы.ИдентификаторИнформационнойБазы.Получить();
			
			
			Результат = Прокси.SetDeliverableNotificationSubscriberID(ID, ИдентификаторУстройства);
		#КонецЕсли
		ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
	Исключение
		ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
		ЗаписатьОшибкуВЛог(ОписаниеОшибки(), Перечисления.РежимыОбменаДанными.ЗагрузкаДанных);
	КонецПопытки;
	
	ВыгрузитьДанные_v2();
	
	
	//статусы документов МП
	
	Узел = Константы.УзелПланаОбмена.Получить();
	ТабСД = Прокси.Get_DataAppStatus(ИдентификаторУстройства);
	МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
	Для Каждого Тек Из ТабСД.DataAppStatus Цикл
		Най = Документы.ПриемДанныхСоСканера.НайтиПоНомеру(Тек.Number);
		
		Если Най.Пустая() Тогда
			Продолжить;
		Иначе
			Най = Най.ПолучитьОбъект();
		КонецЕсли;	
		Най.СтатусЗагрузки = Справочники.СтатусыЗагрузкиДанныхВОсновноеПриложение.НайтиПоКоду(СокрЛП(Тек.Status));
		Най.Записать(РежимЗаписиДокумента.Запись);
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Най.Ссылка);
		СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
		СтрокаНомера.Number = Тек.Number;
		
		МассивНомеров.NumberRow.Добавить(СтрокаНомера);
	КонецЦикла;			
	Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "Документ.сцДанныеСМобильногоПриложения", МассивНомеров);	
	
КонецПроцедуры	

Процедура ЗагрузитьСерверыДанных(Прокси = Неопределено) Экспорт
		Если ПараметрыСеанса.ВыполняетсяОбмен = Истина Тогда
			Возврат;
		КонецеСли;	
		ПараметрыСеанса.ВыполняетсяОбмен = Истина;
		//ПолучитьПрокси();
		
		Если Прокси = Неопределено Тогда
			Прокси = ПолучитьПроксиПоСерверу();
		КонецеСли;	
		
		ИдентификаторУстройства = Константы.ИдентификаторМобильногоУстройства.Получить();
		
		ТипМассивНомеров = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("ArrayOfNumber");
		МассивНомеров = Прокси.ФабрикаXDTO.Создать(ТипМассивНомеров);
		
		ТипСтрокаНомера = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("NumberRow");
		
		
		//серверы данных
		ТабСД = Прокси.GetDataServers(ИдентификаторУстройства);
		
		Для Каждого Тек Из ТабСД.DBServer Цикл
			Най = Справочники.СерверыДанных.НайтиПоКоду(Тек.ID);
			
			Если Най.Пустая() Тогда
				Най = Справочники.СерверыДанных.СоздатьЭлемент();
			Иначе
				Най = Най.ПолучитьОбъект();
			КонецЕсли;	
			Най.Код = Тек.ID;
			Най.Наименование = Тек.Name;
			Най.АдресWSDL = Тек.WSDLAddress;
			Най.АдресWSDLтест = Тек.WSDLAddressTest;
			Най.Логин = Тек.Login;
			Най.Пароль = Тек.Password;
			Най.Записать();
			
			СтрокаНомера = Прокси.ФабрикаXDTO.Создать(ТипСтрокаНомера);		
			СтрокаНомера.Number = Тек.ID;
			
			МассивНомеров.NumberRow.Добавить(СтрокаНомера);
		КонецЦикла;			
		Результат = Прокси.ExchangePlansDeleteChangeRecords(ИдентификаторУстройства, "Справочник.сцСерверыДанных", МассивНомеров);		
КонецПроцедуры	

Функция ПолучитьЗаказыПоСтатусу(Статус, СД = Неопределено, ИМ = Неопределено) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ТабСД = Прокси.Get_ShipmentsByStatus(Статус, ИМ, СД);
	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Тек Из ТабСД.NumberRow Цикл
		Нов = Таб.Добавить();
		Нов.НомерЗаказа = Тек.Number;
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ВТНомера.НомерЗаказа
	|ПОМЕСТИТЬ ВТ_Номера
	|ИЗ
	|	&ВТНомера КАК ВТНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номера.НомерЗаказа КАК Штрихкод,
	|	Отправления.Ссылка КАК Отправление,
	|	ИСТИНА КАК НаличиеПоСтатусу,
	|	0 КАК КоличествоМест
	|ИЗ
	|	ВТ_Номера КАК ВТ_Номера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отправления КАК Отправления
	|		ПО ВТ_Номера.НомерЗаказа = Отправления.Код";
	Зап.УстановитьПараметр("ВТНомера", Таб);			
	ТабРез = Зап.Выполнить().Выгрузить();			
	
	Возврат ТабРез;
КонецФункции	



Функция ПолучитьЗаказыПоСтатусу2(Статус, СД = Неопределено, ИМ = Неопределено) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ТабСД = Прокси.Get_ShipmentsByStatus2(Статус, ИМ, СД);
	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Тек Из ТабСД.NumberRow Цикл
		Нов = Таб.Добавить();
		Нов.НомерЗаказа = Тек.Number;
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ВТНомера.НомерЗаказа
	|ПОМЕСТИТЬ ВТ_Номера
	|ИЗ
	|	&ВТНомера КАК ВТНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номера.НомерЗаказа КАК Штрихкод,
	|	Отправления.Ссылка КАК Отправление,
	|	ИСТИНА КАК НаличиеПоСтатусу,
	|	0 КАК КоличествоМест
	|ИЗ
	|	ВТ_Номера КАК ВТ_Номера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отправления КАК Отправления
	|		ПО ВТ_Номера.НомерЗаказа = Отправления.Код";
	Зап.УстановитьПараметр("ВТНомера", Таб);			
	ТабРез = Зап.Выполнить().Выгрузить();			
	
	Возврат ТабРез;
КонецФункции	



Функция ПолучитьЗаказыПоСтатусуИРеестру(Статус, НомерРеестра) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ТабСД = Прокси.Get_ShipmentsByStatusAndRegisterShipping(Статус, НомерРеестра);
	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Тек Из ТабСД.NumberRow Цикл
		Нов = Таб.Добавить();
		Нов.НомерЗаказа = Тек.Number;
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ВТНомера.НомерЗаказа
	|ПОМЕСТИТЬ ВТ_Номера
	|ИЗ
	|	&ВТНомера КАК ВТНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номера.НомерЗаказа КАК Штрихкод,
	|	Отправления.Ссылка КАК Отправление,
	|	ИСТИНА КАК НаличиеПоСтатусу,
	|	0 КАК КоличествоМест
	|ИЗ
	|	ВТ_Номера КАК ВТ_Номера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отправления КАК Отправления
	|		ПО ВТ_Номера.НомерЗаказа = Отправления.Код";
	Зап.УстановитьПараметр("ВТНомера", Таб);			
	ТабРез = Зап.Выполнить().Выгрузить();			
	
	Возврат ТабРез;
КонецФункции	




Функция ПолучитьЗаказыПоСтатусуИНомеруЗабораСЦ(Статус, НомерЗабора) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ТабСД = Прокси.Get_ShipmentsByStatusAndIntakeNumber(Статус, НомерЗабора);
	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Тек Из ТабСД.NumberRow Цикл
		Нов = Таб.Добавить();
		Нов.НомерЗаказа = Тек.Number;
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ВТНомера.НомерЗаказа
	|ПОМЕСТИТЬ ВТ_Номера
	|ИЗ
	|	&ВТНомера КАК ВТНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номера.НомерЗаказа КАК Штрихкод,
	|	Отправления.Ссылка КАК Отправление,
	|	ИСТИНА КАК НаличиеПоСтатусу,
	|	0 КАК КоличествоМест
	|ИЗ
	|	ВТ_Номера КАК ВТ_Номера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отправления КАК Отправления
	|		ПО ВТ_Номера.НомерЗаказа = Отправления.Код";
	Зап.УстановитьПараметр("ВТНомера", Таб);			
	ТабРез = Зап.Выполнить().Выгрузить();			
	
	Возврат ТабРез;
КонецФункции	




Функция ПолучитьЗаказыПоСтатусуИНомеруЗабораСЦСУдаленнойПриемкой(Статус, НомерЗабора) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ТабСД = Прокси.Get_ShipmentsByStatusAndIntakeNumberWithRemote(Статус, НомерЗабора);
	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	Таб.Колонки.Добавить("Remote", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Тек Из ТабСД.NumberRow Цикл
		Нов = Таб.Добавить();
		Нов.НомерЗаказа = Тек.Number;
		Нов.Remote = Тек.Remote;
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	            |	ВТНомера.НомерЗаказа,
	            |	ВТНомера.Remote
	            |ПОМЕСТИТЬ ВТ_Номера
	            |ИЗ
	            |	&ВТНомера КАК ВТНомера
	            |;
	            |
	            |////////////////////////////////////////////////////////////////////////////////
	            |ВЫБРАТЬ
	            |	ВТ_Номера.НомерЗаказа КАК Штрихкод,
	            |	Отправления.Ссылка КАК Отправление,
	            |	ИСТИНА КАК НаличиеПоСтатусу,
	            |	0 КАК КоличествоМест,
	            |	ВТ_Номера.Remote КАК УдаленнаяПриемка
	            |ИЗ
	            |	ВТ_Номера КАК ВТ_Номера
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отправления КАК Отправления
	            |		ПО ВТ_Номера.НомерЗаказа = Отправления.Код";
	Зап.УстановитьПараметр("ВТНомера", Таб);			
	ТабРез = Зап.Выполнить().Выгрузить();			
	
	Возврат ТабРез;
КонецФункции	



Функция ПолучитьЗаказыПоСтатусуИРееструНаВозврат(Статус, НомерРеестра) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ТабСД = Прокси.Get_ShipmentsByStatusAndRegisterReturn(Статус, НомерРеестра);
	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Тек Из ТабСД.NumberRow Цикл
		Нов = Таб.Добавить();
		Нов.НомерЗаказа = Тек.Number;
	КонецЦикла;	
	
	
	Зап = Новый Запрос;
	
	Зап.Текст = "ВЫБРАТЬ
	|	ВТНомера.НомерЗаказа
	|ПОМЕСТИТЬ ВТ_Номера
	|ИЗ
	|	&ВТНомера КАК ВТНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номера.НомерЗаказа КАК Штрихкод,
	|	Отправления.Ссылка КАК Отправление,
	|	ИСТИНА КАК НаличиеПоСтатусу,
	|	0 КАК КоличествоМест
	|ИЗ
	|	ВТ_Номера КАК ВТ_Номера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Отправления КАК Отправления
	|		ПО ВТ_Номера.НомерЗаказа = Отправления.Код";
	Зап.УстановитьПараметр("ВТНомера", Таб);			
	ТабРез = Зап.Выполнить().Выгрузить();			
	
	Возврат ТабРез;
КонецФункции	


Процедура ЗаписатьОшибкуВЛог(ТекстОшибки, ТипЗагрузки)
	Наб = РегистрыСведений.ЛогОшибокОбменаДанными.СоздатьНаборЗаписей();
	ТДата = ТекущаяДата();
	Сервер = Константы.СерверОбмена.Получить();
	Наб.Отбор.Период.Установить(ТДата);
	Наб.Отбор.РежимОбмена.Установить(ТипЗагрузки);
	Наб.Отбор.СерверДанных.Установить(Сервер);
	Нов = Наб.Добавить();
	Нов.Период = ТДата;
	Нов.ТекстОшибки = ТекстОшибки;
	Нов.РежимОбмена = ТипЗагрузки;
	Нов.СерверДанных = Сервер;
	Наб.записать();		
КонецПроцедуры

//устаревшая процедура
Процедура ВыгрузитьДанные() Экспорт
	Попытка
		Прокси = ПолучитьПроксиПоСерверу();
		//ПолучитьПрокси();
		
		МассивДоков = Новый Массив;
		
		
		ТипМассивДанных = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("ArrayOfDataApp");
		МассивДанных = Прокси.ФабрикаXDTO.Создать(ТипМассивДанных);
		
		
		Узел = Константы.УзелПланаОбмена.Получить();
		Если Узел.Пустая() Тогда
			ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
			ЗаписатьОшибкуВЛог("Не указан узел обмена", Перечисления.РежимыОбменаДанными.ВыгрузкаДанных);
			Возврат;
		КонецеСли;	
		
		ТипДанные = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("DataApp");
		ТипСтрокиДанныхШтрихкоды = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("TableDataAppShipments");
		ТипСтрокиДанныхНенайденныеШтрихкоды = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("TableDataAppNotFoundBarcode");
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПриемДанныхСоСканераИзменения.Ссылка КАК Объект,
		            |	ВЫБОР
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ПриходЗаказовОтИнтернетМагазина)
		            |			ТОГДА 1
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ОтгрузкаЗаказовВТранспортнуюКомпанию)
		            |			ТОГДА 2
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ПриходВозвратныхЗаказов)
		            |			ТОГДА 3
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ОтгрузкаЗаказовВИнтернетМагазин)
		            |			ТОГДА 4
		            |	КОНЕЦ КАК DocumetType,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Номер КАК Number,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Дата КАК Date,
		            |	ЕСТЬNULL(ПриемДанныхСоСканераИзменения.Ссылка.ИнтернетМагазин.Код, """") КАК InternetShop,
		            |	ЕСТЬNULL(ПриемДанныхСоСканераИзменения.Ссылка.СлужбаДоставки.Код, """") КАК ServiceDelivery,
		            |	ЕСТЬNULL(ПриемДанныхСоСканераИзменения.Ссылка.СкладВозврата.Код, """") КАК Warehouse,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.ДокументЗаполнен КАК DocumetFilled,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Штрихкоды.(
		            |		Штрихкод КАК Barcode,
		            |		Отправление.Код КАК NumberYandex,
		            |		НаличиеПоСтатусу КАК AvailableAtStatus,
		            |		КоличествоМест КАК NumberOfPlaces,
		            |		ВНаличии КАК AvailableOnScanner,
		            |		Вычерк КАК CrossOut
		            |	) КАК ТабШтрихкоды,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.НенайденныеШтрихкоды.(
		            |		Штрихкод КАК Barcode,
		            |		КоличествоМест КАК NumberOfPlaces
		            |	) КАК ТабНенайденныеШтрихкоды,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.ПометкаУдаления КАК DeletionMark,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Проведен КАК Posted,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.ЗагружатьБезПроверки КАК CreateDocumentsByDocumetType
		            |ИЗ
		            |	Документ.ПриемДанныхСоСканера.Изменения КАК ПриемДанныхСоСканераИзменения
		            |ГДЕ
		            |	ПриемДанныхСоСканераИзменения.Узел = &Узел";
		Зап.УстановитьПараметр("Узел", Узел.Ссылка);			
		Выб = Зап.Выполнить().Выбрать();
		
		Пока Выб.Следующий() Цикл
			Данные = Прокси.ФабрикаXDTO.Создать(ТипДанные);
			ЗаполнитьЗначенияСвойств(Данные, Выб);
			Данные.MobileUser = СокрЛП(Константы.Пользователь.Получить().Код);
			ВыбТаб = Выб.ТабШтрихкоды.Выгрузить();
			Для Каждого Тек Из ВыбТаб Цикл
				Если Не ЗначениеЗаполнено(Тек.NumberYandex) Тогда
					Тек.NumberYandex = "";
				КонецеСли;	
				СтрокаДанныхШтрихкоды = Прокси.ФабрикаXDTO.Создать(ТипСтрокиДанныхШтрихкоды);
				ЗаполнитьЗначенияСвойств(СтрокаДанныхШтрихкоды, Тек);
				Данные.TableDataAppShipments.Добавить(СтрокаДанныхШтрихкоды);
			КонецЦикла;	
			
			ВыбТаб = Выб.ТабНенайденныеШтрихкоды.Выбрать();
			Пока ВыбТаб.Следующий() Цикл
				СтрокаДанныхНенайденныеШтрихкоды = Прокси.ФабрикаXDTO.Создать(ТипСтрокиДанныхНенайденныеШтрихкоды);
				ЗаполнитьЗначенияСвойств(СтрокаДанныхНенайденныеШтрихкоды, ВыбТаб);
				Данные.TableDataAppNotFoundBarcode.Добавить(СтрокаДанныхНенайденныеШтрихкоды);
			КонецЦикла;	
			МассивДанных.DataApp.Добавить(Данные);
			МассивДоков.Добавить(Выб.Объект);
		КонецЦикла;
		
		ИдентификаторМП = СокрЛП(Константы.ИдентификаторМобильногоУстройства.Получить());
		
		Если МассивДанных.DataApp.Количество() <> 0 Тогда
			РезультатВыполнения = Прокси.Create_DataApp(МассивДанных, ИдентификаторМП);
		КонецеСли;	
		Если МассивДоков.Количество() <> 0 Тогда
			Если Не РезультатВыполнения.Error Тогда
				Для Каждого ТекЭл Из МассивДоков Цикл
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭл);
				КонецЦикла;	
			Иначе
				ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
				ЗаписатьОшибкуВЛог(РезультатВыполнения.ErrorDescription, Перечисления.РежимыОбменаДанными.ВыгрузкаДанных);
			КонецеСли;	
		КонецеСли;
	Исключение
		ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
		ЗаписатьОшибкуВЛог(ОписаниеОшибки(), Перечисления.РежимыОбменаДанными.ВыгрузкаДанных);
	КонецПопытки;
КонецПроцедуры	      
//устаревшая процедура

Процедура ВыгрузитьДанные_v2() Экспорт
	Попытка
		Прокси = ПолучитьПроксиПоСерверу();
		//ПолучитьПрокси();
		
		МассивДоков = Новый Массив;
		
		
		ТипМассивДанных = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("ArrayOfDataApp_v2");
		МассивДанных = Прокси.ФабрикаXDTO.Создать(ТипМассивДанных);
		
		
		Узел = Константы.УзелПланаОбмена.Получить();
		Если Узел.Пустая() Тогда
			ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
			ЗаписатьОшибкуВЛог("Не указан узел обмена", Перечисления.РежимыОбменаДанными.ВыгрузкаДанных);
			Возврат;
		КонецеСли;	
		
		ТипДанные = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("DataApp_v2");
		ТипСтрокиДанныхШтрихкоды = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("TableDataAppShipments");
		ТипСтрокиДанныхНенайденныеШтрихкоды = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.strizh-logistic.ru/1C/Storage").Получить("TableDataAppNotFoundBarcode");
		
		Зап = Новый Запрос;
		Зап.Текст = "ВЫБРАТЬ
		            |	ПриемДанныхСоСканераИзменения.Ссылка КАК Объект,
		            |	ВЫБОР
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ПриходЗаказовОтИнтернетМагазина)
		            |			ТОГДА 1
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ОтгрузкаЗаказовВТранспортнуюКомпанию)
		            |			ТОГДА 2
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ПриходВозвратныхЗаказов)
		            |			ТОГДА 3
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.ТипСбораДанных = ЗНАЧЕНИЕ(Перечисление.ТипСбораДанных.ОтгрузкаЗаказовВИнтернетМагазин)
		            |			ТОГДА 4
		            |	КОНЕЦ КАК DocumetType,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Номер КАК Number,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Дата КАК Date,
		            |	ЕСТЬNULL(ПриемДанныхСоСканераИзменения.Ссылка.ИнтернетМагазин.Код, """") КАК InternetShop,
		            |	ЕСТЬNULL(ПриемДанныхСоСканераИзменения.Ссылка.СлужбаДоставки.Код, """") КАК ServiceDelivery,
		            |	ЕСТЬNULL(ПриемДанныхСоСканераИзменения.Ссылка.СкладВозврата.Код, """") КАК Warehouse,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.ДокументЗаполнен КАК DocumetFilled,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Штрихкоды.(
		            |		Штрихкод КАК Barcode,
		            |		Отправление.Код КАК NumberYandex,
		            |		НаличиеПоСтатусу КАК AvailableAtStatus,
		            |		КоличествоМест КАК NumberOfPlaces,
		            |		ВНаличии КАК AvailableOnScanner,
		            |		Вычерк КАК CrossOut
		            |	) КАК ТабШтрихкоды,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.НенайденныеШтрихкоды.(
		            |		Штрихкод КАК Barcode,
		            |		КоличествоМест КАК NumberOfPlaces
		            |	) КАК ТабНенайденныеШтрихкоды,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.ПометкаУдаления КАК DeletionMark,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.Проведен КАК Posted,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.ЗагружатьБезПроверки КАК CreateDocumentsByDocumetType,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.НомерРеестра КАК ShipmentNum,
		            |	ПриемДанныхСоСканераИзменения.Ссылка.НомерЗабораСЦ КАК IntakeNum,
		            |	ВЫБОР
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.РежимПолученияДанных = ЗНАЧЕНИЕ(Перечисление.РежимПолученияОжидаемыхЗаказов.ПоЗабору)
		            |			ТОГДА 1
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.РежимПолученияДанных = ЗНАЧЕНИЕ(Перечисление.РежимПолученияОжидаемыхЗаказов.ПоМагазину)
		            |			ТОГДА 2
		            |		КОГДА ПриемДанныхСоСканераИзменения.Ссылка.РежимПолученияДанных = ЗНАЧЕНИЕ(Перечисление.РежимПолученияОжидаемыхЗаказов.Пореестру)
		            |			ТОГДА 3
		            |		ИНАЧЕ 0
		            |	КОНЕЦ КАК ExpectedOrdersMode
		            |ИЗ
		            |	Документ.ПриемДанныхСоСканера.Изменения КАК ПриемДанныхСоСканераИзменения
		            |ГДЕ
		            |	ПриемДанныхСоСканераИзменения.Узел = &Узел";
		Зап.УстановитьПараметр("Узел", Узел.Ссылка);			
		Выб = Зап.Выполнить().Выбрать();
		
		Пока Выб.Следующий() Цикл
			Данные = Прокси.ФабрикаXDTO.Создать(ТипДанные);
			ЗаполнитьЗначенияСвойств(Данные, Выб);
			Данные.MobileUser = СокрЛП(Константы.Пользователь.Получить().Код);
			ВыбТаб = Выб.ТабШтрихкоды.Выгрузить();
			Для Каждого Тек Из ВыбТаб Цикл
				Если Не ЗначениеЗаполнено(Тек.NumberYandex) Тогда
					Тек.NumberYandex = "";
				КонецеСли;	
				СтрокаДанныхШтрихкоды = Прокси.ФабрикаXDTO.Создать(ТипСтрокиДанныхШтрихкоды);
				ЗаполнитьЗначенияСвойств(СтрокаДанныхШтрихкоды, Тек);
				Данные.TableDataAppShipments.Добавить(СтрокаДанныхШтрихкоды);
			КонецЦикла;	
			
			ВыбТаб = Выб.ТабНенайденныеШтрихкоды.Выбрать();
			Пока ВыбТаб.Следующий() Цикл
				СтрокаДанныхНенайденныеШтрихкоды = Прокси.ФабрикаXDTO.Создать(ТипСтрокиДанныхНенайденныеШтрихкоды);
				ЗаполнитьЗначенияСвойств(СтрокаДанныхНенайденныеШтрихкоды, ВыбТаб);
				Данные.TableDataAppNotFoundBarcode.Добавить(СтрокаДанныхНенайденныеШтрихкоды);
			КонецЦикла;	
			МассивДанных.DataApp.Добавить(Данные);
			МассивДоков.Добавить(Выб.Объект);
		КонецЦикла;
		
		ИдентификаторМП = СокрЛП(Константы.ИдентификаторМобильногоУстройства.Получить());
		
		Если МассивДанных.DataApp.Количество() <> 0 Тогда
			РезультатВыполнения = Прокси.Create_DataApp_v2(МассивДанных, ИдентификаторМП);
		КонецеСли;	
		Если МассивДоков.Количество() <> 0 Тогда
			Если Не РезультатВыполнения.Error Тогда
				Для Каждого ТекЭл Из МассивДоков Цикл
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭл);
				КонецЦикла;	
			Иначе
				ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
				ЗаписатьОшибкуВЛог(РезультатВыполнения.ErrorDescription, Перечисления.РежимыОбменаДанными.ВыгрузкаДанных);
			КонецеСли;	
		КонецеСли;
	Исключение
		ПараметрыСеанса.ВыполняетсяОбмен = Ложь;
		ЗаписатьОшибкуВЛог(ОписаниеОшибки(), Перечисления.РежимыОбменаДанными.ВыгрузкаДанных);
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьПрокси() Экспорт
	Тест = Константы.ТестоваяСреда.Получить();
	Если Тест Тогда
		Возврат WSСсылки.Storage_test.СоздатьWSПрокси("http://www.strizh-logistic.ru/1C/Storage", "Storage", "StorageSoap",,20);
	Иначе
		Возврат WSСсылки.Storage.СоздатьWSПрокси("http://www.strizh-logistic.ru/1C/Storage", "Storage", "StorageSoap",,20);
	КонецеСли;	
КонецФункции	

Функция ПолучитьПроксиПоСерверу() Экспорт
	Тест = Константы.ТестоваяСреда.Получить();
	Сервер = Константы.СерверОбмена.Получить();
	Если Тест Тогда
		Определение = Новый WSОпределения(СокрЛП(Сервер.АдресWSDLтест),СокрЛП(Сервер.Логин),СокрЛП(Сервер.Пароль),,10);
		Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1C/Storage", "Storage", "StorageSoap");
	Иначе
		Определение = Новый WSОпределения(СокрЛП(Сервер.АдресWSDL),СокрЛП(Сервер.Логин),СокрЛП(Сервер.Пароль),,10);
		Прокси = Новый WSПрокси(Определение, "http://www.strizh-logistic.ru/1C/Storage", "Storage", "StorageSoap");
	КонецЕсли;	
	Прокси.Пользователь = СокрЛП(Сервер.Логин);
	Прокси.Пароль = СокрЛП(Сервер.Пароль);
	Возврат Прокси;
КонецФункции	

Функция ПолучитьМагазинПоЗаказу(НомерЯндекс) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	ИДМагазина = Прокси.Get_InternetShopID(НомерЯндекс);	
	Возврат Справочники.ИнтернетМагазины.НайтиПоКоду(ИДМагазина).Ссылка;
КонецФункции	



Функция ПолучитьРеестрПоЗаказу(НомерЯндекс) Экспорт
	Прокси = ПолучитьПроксиПоСерверу();
	//ПолучитьПрокси();
	
	НомерРеестра = Прокси.GetRegisterShippingNumberByShipment(НомерЯндекс);	
	Возврат НомерРеестра;
КонецФункции	

Процедура СменитьСерверДанных(КодСервера) Экспорт
	Сервер = Справочники.СерверыДанных.НайтиПоКоду(КодСервера);
	Если Не Сервер.Пустая() Тогда
		Константы.СерверОбмена.Установить(Сервер.Ссылка);
	КонецеСли;	
КонецПроцедуры	
